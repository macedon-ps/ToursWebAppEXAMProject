@model SearchProductViewModel
@{
    ViewData["Title"] = "Search Page";

    string ParseListOfStringsToString(List<string> allItemsListOfString)
	{
		var allItemsOneString = "";
		allItemsOneString = String.Join(",", allItemsListOfString);

		return allItemsOneString;
	}
}

<div class="searchPage">
    
    @await Html.PartialAsync("SearchButtonMenuPartial")

    <div class="searchHeader">
        <h1>Поиск туристических продуктов:</h1>
        <br/>
        <div class="searchMenu">  

            <form asp-controller="Search" asp-action="Index" method="post" name="myForm">
                
                @*свойства, кот. передаются в  строковом виде или с приведением к строке*@
                <input type="hidden" asp-for="CountryId" value="@Model.CountryId" />
                <input type="hidden" asp-for="AllCountriesWithCitiesListByOneString" value="@Model.AllCountriesWithCitiesListByOneString" id="AllCountriesAndCities"/>
                <input type="hidden" asp-for="CityNameSelected" />

                @*свойства, кот. предварительно преобразуются в строки*@
                <input type="hidden"  name="CountriesOneStringFormValue" value="@ParseListOfStringsToString(Model.Countries)" />
                <input type="hidden"  name="CitiesOneStringFormValue" value="@ParseListOfStringsToString(Model.Cities)" />
                               
                @* Первый блок элементов: 
                    3 select (список стран, количество дней отдыха, количество отдыхающих), 
                    календарь и кнопка "Найти тур" *@

                <div class="flexRow searchBlock1">   
                    
                    @*Список стран (выпадающий список, единственный выбор)
                        По выбранной стране будет выводиться список городов этой страны*@
                    <div class="flexColumn blockWidth20">
                        <div>
                            <label asp-for="CountryNameSelected"></label>
                            <select asp-for="CountryNameSelected" 
                                asp-items="@Model.CountriesList" name="countriesSelect">
                            </select>
                        </div>
                        <div id="countriesSelectDiv" class="flexColumn blockWidth20"></div>
                    </div>
                    
                    @*Даты поездки (выпадающий календарь, по интервалу "от" и "до") *@
                    @{
                        // TODO: доработать выпадающий календарь, чтобы м.б. выбирать интервал "от" и "до"
                    }
                    <div class="flexColumn blockWidth20">
                        <label asp-for="DaysInterval"></label>
                        <input asp-for="DaysInterval" />
                    </div>
                    
                    @*Количество дней отдыха (выпадающий список, единственный выбор, + свой выбор)*@
                    <div class="flexColumn blockWidth20">
                        <label asp-for="NumberOfDaysFromSelectList"></label>
                        <select asp-for="NumberOfDaysFromSelectList" 
                            asp-items="@Html.GetEnumSelectList<NumberOfDaysEnum>()">
                        </select>
                    </div>
                
                    @*Количество взрослых и детей (выпадающий список, единственный выбор, + свой набор)*@
                    <div class="flexColumn blockWidth20">
                        <label asp-for="NumberOfPeopleFromSelectList"></label>
                        <select asp-for="NumberOfPeopleFromSelectList" 
                            asp-items="@Html.GetEnumSelectList<NumberOfPeopleEnum>()">
                        </select>
                    </div>
                    
                    @*Кнопка "Найти тур"*@
                    <div class="flexColumn blockWidth20">
                        <input type="submit" value="Найти тур" />
                    </div>
                </div> 

                @* Второй блок элементов: 
                    1 select (список городов), карта и блоки описаний о странах, городах, достопримечательностъ
                *@

                <div class="flexRow searchBlock2">   
                    @*Список городов (выпадающий список, множественный выбор)
                      Список городов выводится по выбранной стране*@
                    <div class="flexColumn blockWidth20">
                        <div id="divForChangeCitiesSelectList" >
                            <label asp-for="CityNameSelected"></label>
                            <select  asp-for="CityNameSelected" 
                                asp-items="@Model.CitiesList" name="citiesSelect">
                            </select>
                        </div>    
                        <div id="citiesSelectDiv" class="flexColumn blockWidth20"></div>    
                    </div>
                        
                    @*Карта страны / Фото страны, городов, достопримечательностей (одна картинка / фото)*@
                    <div class="flexColumn blockWidth60">
                        <label asp-for="MapImagePath"></label>
                        <img src="@Model.MapImagePath" alt="Карта страны / Фото страны, городов, достопримечательностей"/>
                    </div>

                    @*Описание страны, городов, достопримечательностей (1 - страны, 2 - города, 3 - достопримечательности)*@
                    <div class="flexColumn blockWidth20">
                        <label asp-for="CountryDescription"></label>
                        <p>@Model.CountryDescription</p>
                        <label asp-for="CityDescrition"></label>
                        <p>@Model.CityDescrition</p>
                        <label asp-for="LocalDescrition"></label>
                        <p>@Model.LocalDescrition</p>
                    </div>
                </div>

                @* Блок данных информационного характера, на пермод разработки
                   В дальнейшем, будет убран из проекта
                
                
                <div class="flexColumn searchBlock2">
                    <p>Полные данные вью модели:</p><br />
                    <p>Model.CountryId / Id страны: @Model.CountryId</p>
                    <p>Model.CountryNameSelected / Страна: @Model.CountryNameSelected</p>
                    <p>Model.CountryDescription / Описание страны: @Model.CountryDescription </p>
                    <p>Model.CountriesList / Список стран:</p>
                        @foreach(var country in Model.CountriesList){
                            <p>Страна: @country.Text value: @country.Value isSelected: @country.Selected</p>
                        }
                    <br />
                                                  
                    <p>Model.CityNameSelect / Город: @Model.CityNameSelected</p>
                    <p>Model.CityDescrition / Описание города: @Model.CityDescrition </p>
                    <p>Model.LocalDescrition / Описание достопримечательности: @Model.LocalDescrition</p>
                    <p>Model.CitiesList / Список городов: </p>
                    
                    @foreach(var city in Model.CitiesList)
                    {
                        <p>Город: @city.Text value: @city.Value isSelected: @city.Selected</p>
                    }
                    <br />

                    <p>Model.DaysInterval / Даты: @Model.DaysInterval</p>
                    <p>Model.NumberOfDaysFromSelectList / Количество дней:  @Model.NumberOfDaysFromSelectList </p>
                    <p>Model.NumberOfPeopleFromSelectLi / Количество людей: @Model.NumberOfPeopleFromSelectList</p><br />
                         
                    <p>Model.MapImagePath / Карта: @Model.MapImagePath</p>
                    <p>Model.PicturesImagePath / Картинки: @Model.PicturesImagePath</p>
                </div>
                *@
            </form>
        </div>
     </div>
</div>
<script>
   
    // Скрипт по изменению данных 2-х Html-элементов Select (список стран в БД и список городов для выбранной страны из БД) 
    // по событию изменения значения первого Select (список стран). Изменения происходят без перезагрузки страницы.
   
    // 1. Находим все нужные Html элементы
    // 1.1. Находим select эдементы по аттрибуту "name" - список стран и список городов
    var countriesListSelectElement = document.getElementsByName('countriesSelect')[0];
    var citiesListSelectElement = document.getElementsByName('citiesSelect')[0];

    // 1.2. находим по id input type="hidden", в кот. хранится информация о всех странах и городах, кот. есть в БД 
    var allCountriesAndCities = document.getElementById('AllCountriesAndCities');
    
    // 2. Сохраним значение строки данных о всех странах и городах из БД
    var allCountriesWithCitiesByOneString = allCountriesAndCities.value;
    
    // 3. Из данной строки сформируем ассоциативный массив, где ключ - название страны, а значение - массив строк - названий городов
    // 3.1. Создаем сам ассоциативный массив 
    var countriesWithCitiesAssocArray = GetAllCountriesWithCitiesAssocArray(allCountriesWithCitiesByOneString); 

    // функция создания ассоциативного массива с парами "ключ" : "значение", 
    function GetAllCountriesWithCitiesAssocArray(allByOneString) {
        var assocArray = new Map();
        var key_AssocArray = "";
        var value_AssocArray = "";
        var values_AssocArray = [];
        // slice(0,-2) - возвращаем копию массива с элементами от 0 до 3-го с конца, т.е. без "\r\n", 
        // split("\n") - полученную строку разбиваем по разделителю "\r\n"
        // т.о. убираем последний пустой элемент массива
        var allArray = allByOneString.slice(0,-2).split("\n");

        // преобразуем обычный массив allArray в ассоциативный массив assocArray
        for(var i = 0; i < allArray.length; i++){
            var item = allArray[i];
            // возвращаем копию массива с элементами от 0 до 2-го с конца, т.е. без последней запятой (,)
            item = item.slice(0, -1);
            // делим каждый элемент на "ключ" и "значение" 
            massiv = item.split(":");
            key_AssocArray = massiv[0];
            value_AssocArray = massiv[1];
            if(value_AssocArray.includes(",")){
                // создаем массив values_AssocArray по разделителю ","
                values_AssocArray = value_AssocArray.split(',');
            } else {
                values_AssocArray.push(value_AssocArray);
            }
            // добавляем новый элемент ассоциативного массива в виде пары "ключ" : "значение"
            assocArray.set(key_AssocArray, values_AssocArray);
            // обнуление значения, чтобы очищалось значение списка горордов
            values_AssocArray = [];
        }
        return assocArray;
    }
    
    // 4. Подпишемся на событие изменение списка городов в связи с изменением страны
    countriesListSelectElement.addEventListener("change", changeCountry);

    // 4.1. Функция, кот. обрабатывает изменение списка городов
    function changeCountry() {
       
        // 4.2. Создаем переменную для имени выбранной страны
        var selectCountryName = "";
                
        // найдем значение выбранной страны из списка стран
        selectCountryName = countriesListSelectElement.options[countriesListSelectElement.selectedIndex].value;

        // если страна не выбрана, выходим из функции без видимых изменений UI
        //if (selectCountryName == null) {
        //    return;
        //}

        // устанавливаем выбранный элемент для списка стран
        countriesListSelectElement.value = selectCountryName;
        console.log(`countriesListSelectElement.value = ${countriesListSelectElement.value}`);

        // вызываем функцию создание нового и замены старого списка городов
        UpdateCitiesSelectElement(selectCountryName, countriesWithCitiesAssocArray);
    }
    
    // функция создания Html элемента <select></select> для списка городов
    function UpdateCitiesSelectElement(selectCountryName, assocArray) {
        
        // создадим новый список городов
        var selectList = document.createElement("select");
        
        var parentDiv = document.getElementById('divForChangeCitiesSelectList');
        
        // замена старого списка городов новым / сначала указывается новый, потом - старый
        parentDiv.replaceChild(selectList, citiesListSelectElement);
        
        // перезаписываем элемент по ссылке на старый элемент
        citiesListSelectElement = selectList;

        var citiesArray = GetCitiesArray(selectCountryName, assocArray);

        for(var i = 0; i < citiesArray.length; i++){
            var option = document.createElement("option");
            option.value = citiesArray[i];
            option.text = citiesArray[i];
            citiesListSelectElement.appendChild(option);   
        }
        
        // 5. Подпишемся на событие изменение города в созданном списке городов
        citiesListSelectElement.addEventListener("change", changeCity);
        // если 1 элемент в массиве, то устанавливаем его как выбранный элемент для списка городов
        if(citiesArray.length === 1){
            citiesListSelectElement.value = citiesListSelectElement.options[0].value;
            console.log(`citiesListSelectElement.value = ${citiesListSelectElement.value}`);
        }
    }

    // из ассоциативного массива выбираем массив значений городов по ключу - названию страны 
    function GetCitiesArray(countryName, allCountriesAssocArray){
        
        var cities = [];
        allCountriesAssocArray.forEach(function(_value, _key){
            if(_key === countryName){
               cities = _value;
            }
        });
        return cities;
    }
    
    // Функция, кот. обрабатывает изменение города в списке городов
    function changeCity(){
        // 5.2. Создаем переменную для имени выбранной страны
        var selectCityName = "";
                
        // найдем значение выбранной страны из списка стран
        selectCityName = citiesListSelectElement.options[countriesListSelectElement.selectedIndex].value;

        // если страна не выбрана, выходим из функции без видимых изменений UI
        //if (selectCityName == null) {
        //    return;
        //}

        // устанавливаем выбранный элемент для списка городов
        citiesListSelectElement.value = selectCityName;
        console.log(`citiesListSelectElement.value = ${citiesListSelectElement.value}`);
    }
   
</script>
